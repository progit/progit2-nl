[[_undoing]]
////
Laatst bijgewerkt van progit/progit2 referentie: e992dd62
////
=== Dingen ongedaan maken

Op enig moment wil je misschien iets ongedaan maken.
Hier zullen we een aantal basis-tools laten zien om veranderingen die je gemaakt hebt weer ongedaan te maken.
Maar pas op, je kunt niet altijd het ongedaan maken weer ongedaan maken.
Dit is één van de weinige situaties in Git waarbij je werk kwijt kunt raken als je het verkeerd doet.

Een van de veel voorkomende acties die ongedaan gemaakt moeten worden vindt plaats als je te vroeg commit en misschien vergeten bent een aantal bestanden toe te voegen, of je verknalt je commit boodschap.
Als je opnieuw wilt committen, de aanvullende wijzigingen maken die je was vergeten, deze stagen en weer committen, dan kun je commit met de `--amend` optie uitvoeren:

[source,console]
----
$ git commit --amend
----

Dit commando neemt je staging area en gebruikt dit voor de commit.
Als je geen veranderingen sinds je laatste commit hebt gedaan (bijvoorbeeld, je voert dit commando meteen na je laatste commit uit), dan zal je snapshot er precies hetzelfde uitzien en zal je commit boodschap het enige zijn dat je verandert.

Dezelfde commit-boodschap editor start op, maar deze bevat meteen de boodschap van je vorige commit.
Je kunt de boodschap net als andere keren aanpassen, maar het overschrijft je vorige commit.

Bijvoorbeeld, als je commit en je dan realiseert dat je vergeten bent de veranderingen in een bestand dat je wilde toevoegen in deze commit te stagen, dan kun je zoiets als dit doen:

[source,console]
----
$ git commit -m 'initial commit'
$ git add vergeten_bestand
$ git commit --amend
----

Na deze drie commando's eindig je met één commit; de tweede commit vervangt de resultaten van de eerste.

[NOTE]
====
Het is belangrijk te beseffen dat als je de laatste commit amendeert, je deze niet zo zeer repareert als wel in z'n geheel _vervangt_ met een nieuwe, verbeterde commit die de oude commit uit de weg duwt en de nieuwe daarvoor in de plaats zet.
Effectief is het alsof de vorige commit nooit heeft plaatsgevonden, en het zal niet in je repository geschiedenis te zien zijn.

De overduidelijke waarde van amenderende commits is om kleine verbeteringen aan te brengen aan je laatste commit, zonder je repository geschiedenis te vervuilen met commit berichten van het soort ``Oeps, weer een file vergeten toe te voegen'' of ``Verdraaid, een typefout in de laatste commit gecorrigeerd''.
====

[[_unstaging]]
==== Een gestaged bestand unstagen

De volgende twee paragrafen laten zien hoe je de staging area en veranderingen in je werkdirectories aanpakt.
Het prettige hier is dat het commando dat je gebruikt om de status van die gebieden te bepalen, je er ook aan herinnert hoe je de veranderingen eraan weer ongedaan kunt maken.
Bijvoorbeeld, stel dat je twee bestanden gewijzigd hebt en je wilt ze committen als twee aparte veranderingen, maar je typt per ongeluk `git add *` en staget ze allebei.
Hoe kun je één van de twee nu unstagen?
Het `git status` commando herinnert je eraan:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Direct onder de ``Changes to be committed'' tekst, staat dat je `git reset HEAD <file>...` moet gebruiken om te unstagen.
Laten we dat advies volgen om het `CONTRIBUTING.md` bestand te unstagen:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Het commando is een beetje vreemd, maar het werkt.
Het `CONTRIBUTING.md` bestand is gewijzigd maar weer unstaged.

[NOTE]
=====
Hoewel `git reset` een gevaarlijk commando _kan_ zijn, zeker als je deze met de `--hard` vlag aanroept.
Echter, in het bovenstaande scenario wordt het bestand in je werkdirectory niet geraakt, dus het is relatief ongevaarlijk.
=====

Voor nu is deze toverspreuk alles wat je hoeft te weten van het `git reset` commando.
We zullen nog veel meer details behandelen over wat `reset` doet en hoe dit onder te knie te krijgen zodat je werkelijke heel interessante dingen kunt doen in <<ch07-git-tools#_git_reset>>.

==== Een gewijzigd bestand weer ongewijzigd maken

Wat als je je bedenkt dat je de wijzigingen aan het `CONTRIBUTING.md` bestand niet wilt behouden?
Hoe kun je dit makkelijk ongedaan maken; terugbrengen in de staat waarin het was toen je voor het laatst gecommit hebt (of initieel gekloond, of hoe je het ook in je werkdirectory gekregen hebt)?
Gelukkig vertelt `git status` je ook hoe je dat moet doen.
In de laatste voorbeeld-uitvoer, ziet het unstaged gebied er zo uit:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Het vertelt je behoorlijk expliciet hoe je je veranderingen moet weggooien.
Laten we eens doen wat er staat:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

Je kunt zien dat de veranderingen teruggedraaid zijn.

[IMPORTANT]
=====
Het is belangrijk om te beseffen dat `git checkout -- [bestand]` een gevaarlijk commando is.
Alle lokale wijzigingen die je aan dat bestand gedaan hebt zijn weg; Git heeft zojuist dat bestand vervangen met de meest recent gecommitte versie.
Gebruik dit commando dan ook nooit, tenzij je heel zeker weet dat je die niet bewaarde lokale wijzigingen niet nodig hebt.
=====

Als je het voor nu alleen maar even uit de weg wilt hebben, gebruik dan branching of stashing wat we behandelen in <<ch03-git-branching#ch03-git-branching>>; dit zijn vaak de betere opties.

Onthoud, alles dat in Git _gecommit_ is kan bijna altijd weer hersteld worden.
Zelfs commits die op reeds verwijderde branches gedaan zijn, of commits die zijn overschreven door een `--amend` commit, kunnen weer hersteld worden (zie <<ch10-git-internals#_data_recovery>> voor data herstel).
Maar, alles wat je verliest dat nog nooit was gecommit is waarschijnlijk voorgoed verloren.
