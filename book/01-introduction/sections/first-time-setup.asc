[[_first_time]]
////
Laatst bijgewerkt van progit/progit2 referentie: 7836cfed
////
=== Git klaarmaken voor eerste gebruik

Nu je Git op je computer hebt staan, is het handig dat je een paar dingen doet om je Git omgeving aan jouw voorkeuren aan te passen.
Je hoeft deze instellingen normaliter maar één keer te doen, ze blijven hetzelfde als je een nieuwe versie van Git installeert.
Je kunt ze ook op elk moment weer veranderen door de commando's opnieuw uit te voeren.

Git bevat standaard een stuk gereedschap genaamd `git config`, waarmee je de configuratie-eigenschappen kunt bekijken en veranderen, die alle aspecten van het uiterlijk en gedrag van Git regelen.(((git commando's, configuratie)))
Deze eigenschappen kunnen op drie verschillende plaatsen worden bewaard:

1.	Het bestand `/etc/gitconfig`: Bevat eigenschappen voor elk gebruiker op de computer en al hun repositories.
 Als je de optie `--system` meegeeft aan `git config`, zal het de configuratiegegevens in dit bestand lezen en schrijven.
 (Omdat dit een systeem configuratiebestand betreft, moet je administrative of superuser privileges hebben om deze te kunnen wijzigen.)
2.	Het bestand `~/.gitconfig` of `~/.config/git/config`: Eigenschappen voor jouw account.
 Je kunt Git dit bestand laten lezen en schrijven door de optie `--global` mee te geven, en dit heeft gevolgen voor _alle_ repositories waarmee je op je systeem werkt.
3.	Het configuratiebestand in de Gitdirectory (dus `.git/config`) van de repository die je op het moment gebruikt: Specifiek voor die ene repository.
 Je kunt git dit bestand laten lezen en schrijven door de optie `--local` mee te geven, maar dat is eigenlijk de standaard waarde.
 (Niet onverwacht: je moet ergens in een Git repository staan om deze optie juist te laten werken.)

Elk niveau heeft voorrang boven het voorgaande, dus waarden die in `.git/config` zijn gebruikt zullen worden gebruikt in plaats van die in `/etc/gitconfig`.

Op systemen met Windows zoekt Git naar het `.gitconfig`-bestand in de `$HOME` directory (`C:\Users\$USER` voor de meeste mensen).
Het zoekt ook nog steeds naar `/etc/gitconfig`, maar dan gerelateerd aan de plek waar je MSys hebt staan, en dat is de plek is waar je Git op je Windowscomputer geïnstalleerd hebt.
Als je versie 2.x of later gebruikt van Git for Windows, is er ook een systeem-niveau configuratie bestand in
`C:\Documents and Settings\All Users\Application Data\Git\config` op Windows XP, en in `C:\ProgramData\Git\config` op Windows Vista en later.
Dit configuratiebestand kan alleen gewijzigd worden met `git config -f <file>` als een admin.

Je kutn al jouw instellingen en waar ze vandaan komen zien met dit commando:

[source,console]
----
$ git config --list --show-origin
----

==== Jouw identiteit

Het eerste wat je zou moeten doen nadat je Git geïnstalleerd hebt, is je gebruikersnaam en e-mail adres invullen.
Dat is belangrijk omdat elke commit in Git deze informatie gebruikt, en het onveranderlijk ingebed zit in de commits die je zult gaan maken:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Nogmaals, dit hoef je maar één keer te doen als je de `--global` optie erbij opgeeft, omdat Git die informatie zal gebruiken voor alles wat je doet op dat systeem.
Als je een andere naam of e-mail wilt gebruiken voor specifieke projecten, kun je het commando uitvoeren zonder de `--global` optie als je in de directory van dat project zit.

Veel van de GUI tools zullen je helpen dit te doen als je ze voor de eerste keer aanroept.

==== Je editor

Nu Git weet wie je bent, kun je de standaard editor instellen die gebruikt zal worden als Git je een bericht in wil laten typen.
Als dat niet is ingesteld, gebruikt Git de standaard editor van je systeem.

Als je een andere editor wilt gebruiken, zoals Emacs, kun je het volgende doen:

[source,console]
----
$ git config --global core.editor emacs
----

Als je, op een Windows systeem, een andere text editor wilt gebruiken, moet je het volledige pad naar de executable invullen.
Dit kan verschillen, afhankelijk van hoe je editor is geleverd.

In het geval van Notepad++, een populaire editor, zal je waarschijnlijk de 32-bit versie willen gebruiken, omdat -op het moment van schrijven- niet alle plug-ins worden ondersteund door de 64-bit versie.
Als je op een 32-bit Windows machine werkt, of je hebt een 64-bit editor op een 64-bit machine, zal je iets als dit typen:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

Als je een 32-bit editor op een 64-bit systeem hebt, wordt het programma in `C:\Program Files (x86)` geinstalleerd:

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTE]
====
Vim, Emacs en Notepad++ zijn populaire tekst editors die vaak gebruikt worden door ontwikkelaars op Unix achtige systemen als Linux en macOS of een Windows systeem.
Als je niet bekend bent met deze editors, zal je misschien moeten zoeken naar specifieke instructies hoe jouw favoriete editor voor Git in te richten.
====

[WARNING]
====
Als je je editor niet op deze manier inricht, zou het kunnen gebeuren dat je erg in verwarring raakt als Git deze probeert op te starten.
Een voorbeeld op een Windows systeem zou een voortijdig beeindigde Git operatie kunnen zijn tijdens een edit die door Git opgestart is.
====

==== Je instellingen controleren

Als je je instellingen wilt controleren, kan je het `git config --list` commando gebruiken voor een lijst met alle instellingen die Git vanaf die locatie kan vinden:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Je zult sommige sleutels misschien meerdere keren langs zien komen, omdat Git dezelfde sleutel uit verschillende bestanden heeft gelezen (bijvoorbeeld `/etc/gitconfig` en `~/.gitconfig`).
In dit geval gebruikt Git de laatste waarde van elke unieke sleutel die het tegenkomt.

Je kan ook bekijken wat Git als instelling heeft bij een specifieke sleutel door `git config {sleutel}` in te voeren:(((git commando's, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Omdat Git dezelfde configuratie waarde kan lezen van meer dan een bestand, is het mogelijk dat je een onverwachte waarde ziet voor een van deze waarden en je niet weet waarom.
In die gevallen kan je Git vragen naar de _bron_ (origin) van die waarde, en het zal je vertellen welk configuratie bestand het laatste woord had in de bepaling van die waarde:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
